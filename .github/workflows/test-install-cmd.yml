name: test-install-cmd
on: [pull_request, push]

env:
  CACHE_BUSTER: "${{ format('{0}|{1}|{2}|{3}', github.run_id, github.run_number, github.run_attempt, github.job) }}"

jobs:

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # TODO windows-latest
    runs-on: "${{matrix.os}}"
    steps:
      - {name: Check out repository code, uses: actions/checkout@v2}
      - {name: Init, id: init, uses: ./, with: {cache-buster: "${{ env.CACHE_BUSTER }}"}}
      - name: Verify
        env: {INSTALL_CMD_OUT: "${{ steps.init.outputs.install-cmd-out }}"}
        run: |
          set -ux
          test "$INSTALL_CMD_OUT" == "poetry install"

  test-no-dev:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # TODO windows-latest
    runs-on: "${{matrix.os}}"
    steps:
      - {name: Check out repository code, uses: actions/checkout@v2}
      - {name: Init, id: init, uses: ./, with: {cache-buster: "${{ env.CACHE_BUSTER }}", no-dev: "true"}}
      - name: Verify
        env: {INSTALL_CMD_OUT: "${{ steps.init.outputs.install-cmd-out }}"}
        run: |
          set -ux
          test "$INSTALL_CMD_OUT" == "poetry install --no-dev"

  test-postargs:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # TODO windows-latest
    runs-on: "${{matrix.os}}"
    steps:
      - {name: Check out repository code, uses: actions/checkout@v2}
      - {name: Init, id: init, uses: ./, with: {cache-buster: "${{ env.CACHE_BUSTER }}", postargs: " && ls"}}
      - name: Verify
        env: {INSTALL_CMD_OUT: "${{ steps.init.outputs.install-cmd-out }}"}
        run: |
          set -ux
          test "$INSTALL_CMD_OUT" == "poetry install && ls"

  test-postargs-no-dev:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # TODO windows-latest
    runs-on: "${{matrix.os}}"
    steps:
      - {name: Check out repository code, uses: actions/checkout@v2}
      - {name: Init, id: init, uses: ./, with: {cache-buster: "${{ env.CACHE_BUSTER }}", postargs: " && ls", no-dev: "true"}}
      - name: Verify
        env: {INSTALL_CMD_OUT: "${{ steps.init.outputs.install-cmd-out }}"}
        run: |
          set -ux
          test "$INSTALL_CMD_OUT" == "poetry install --no-dev && ls"

  test-install-cmd:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # TODO windows-latest
    runs-on: "${{matrix.os}}"
    steps:
      - {name: Check out repository code, uses: actions/checkout@v2}
      - {name: Init, id: init, uses: ./, with: {cache-buster: "${{ env.CACHE_BUSTER }}", install-cmd: "poetry install --dry-run"}}
      - name: Verify
        env: {INSTALL_CMD_OUT: "${{ steps.init.outputs.install-cmd-out }}"}
        run: |
          set -ux
          test "$INSTALL_CMD_OUT" == "poetry install --dry-run"

  test-install-cmd-no-dev:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # TODO windows-latest
    runs-on: "${{matrix.os}}"
    steps:
      - {name: Check out repository code, uses: actions/checkout@v2}
      - {name: Init, id: init, uses: ./, with: {cache-buster: "${{ env.CACHE_BUSTER }}", install-cmd: "poetry install --dry-run", no-dev: "true"}}
      - name: Verify
        env: {INSTALL_CMD_OUT: "${{ steps.init.outputs.install-cmd-out }}"}
        run: |
          set -ux
          test "$INSTALL_CMD_OUT" == "poetry install --dry-run"

  test-install-cmd-postargs:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # TODO windows-latest
    runs-on: "${{matrix.os}}"
    steps:
      - {name: Check out repository code, uses: actions/checkout@v2}
      - {name: Init, id: init, uses: ./, with: {cache-buster: "${{ env.CACHE_BUSTER }}", install-cmd: "poetry install --dry-run", postargs: " && ls"}}
      - name: Verify
        env: {INSTALL_CMD_OUT: "${{ steps.init.outputs.install-cmd-out }}"}
        run: |
          set -ux
          test "$INSTALL_CMD_OUT" == "poetry install --dry-run && ls"
