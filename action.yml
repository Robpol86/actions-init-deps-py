name: Initialize Dependencies
description: Install project dependencies


inputs:
  python-version:
    description: Python version to install
    required: false
    default: "3.10"
  no-dev-deps:
    description: Whether to exclude pyproject.toml tool.poetry.dev-dependencies
    required: false
    default: "true"
  cache-buster:
    description: Append string to cache key
    required: false
    default: ""
  install-cmd:
    description: Command to install all project dependencies
    required: false
    default: "poetry install"
  install-cmd-no-dev:
    description: Command to install project dependencies without dev-dependencies
    required: false
    default: "poetry install --no-dev"
  postargs:
    description: Append arguments to the install command
    required: false
    default: ""


runs:
  using: composite
  steps:

    - name: Install Python
      uses: actions/setup-python@v2
      with: {python-version: "${{ inputs.python-version }}"}

    - name: Install Poetry
      uses: abatilo/actions-poetry@v2.1.4

    - name: Configure Poetry
      shell: bash
      run: poetry config virtualenvs.in-project true

    - name: Cache venv
      id: cache
      uses: actions/cache@v2
      with:
        key: "${{ runner.os }}-venv-${{ hashFiles('poetry.lock') }}-${{ join(inputs.*, '@') }}"
        path: .venv

    - name: Validate venv
      id: validate
      if: "steps.cache.outputs.cache-hit == 'true'"
      shell: bash
      run: |
        poetry env info --ansi
        temp_file="$(mktemp)"
        poetry env info --no-ansi > "$temp_file"
        if grep -qE "^Valid: +True" "$temp_file"; then
          echo "::set-output name=is-valid::true"
        fi
        rm "$temp_file"

    # TODO: Evict cache on invalid venv: https://github.com/actions/cache/issues/2

    - name: Install dependencies
      if: "steps.validate.outputs.is-valid != 'true'"
      shell: bash
      env: {INSTALL_CMD: "${{ inputs.no-dev-deps == 'true' && inputs.install-cmd-no-dev || inputs.install-cmd }}"}
      run: "${{ env.INSTALL_CMD }} ${{ inputs.postargs }}"

    - name: Validate venv
      if: "steps.validate.outputs.is-valid != 'true'"
      shell: bash
      run: |
        poetry env info --ansi
        temp_file="$(mktemp)"
        poetry env info --no-ansi > "$temp_file"
        if ! grep -qE "^Valid: +True" "$temp_file"; then
          echo "Virtualenv is invalid" >&2
          exit 1
        fi
        rm "$temp_file"


outputs:
  python-version:
    description: Same as input
    value: ${{ inputs.python-version }}
  no-dev-deps:
    description: Same as input
    value: ${{ inputs.no-dev-deps }}
  cache-buster:
    description: Same as input
    value: ${{ inputs.cache-buster }}
  install-cmd:
    description: Same as input
    value: ${{ inputs.install-cmd }}
  install-cmd-no-dev:
    description: Same as input
    value: ${{ inputs.install-cmd-no-dev }}
  postargs:
    description: Same as input
    value: ${{ inputs.postargs }}
